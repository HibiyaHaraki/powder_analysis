clear; close all; clc;
logging_func("Analyze frequency data");
%% Explanation

% 
% analyze_frequency
%
% created by Hibiya Haraki 2022
% All risks of running this script is always with you.
%
% Analyze frequency
% 
% Warning
%  This script needs following files in the same folder.
%

%% Setting
global num_search_x count h

% PIV data file name
PIV_data_filename = '../PIV_xo350W45固定壁L1H1定常/result/PIV_data.mat';

% Truck data file name
Truck_data_filename = "../加速度データ_xo350W45固定壁L1H1定常/Truck_data.mat";

% Output folder
output_folder = '../PIV_xo350W45固定壁L1H1定常/result';

% Search pixel
search_y = [5]; % [mm]

% Search frequency
search_freq = 30; % [Hz]

% Time range for FFT
acceleration_fft_time_range = false;
acceleration_fft_start_time = 0.5; % [s]
acceleration_fft_stop_time = 1; % [s]

constVelocity_fft_time_range = false;
constVelocity_fft_start_time = 0.5; % [s]
constVelocity_fft_stop_time = 1; % [s]

% x-range in FFT result
x_range = [0 100];

%% Convert unit of search pixel
search_y = search_y ./ 1000;

load(PIV_data_filename,"mean_x");
search_x = mean_x{1};

%% Compute characteristic velocity
logging_func("Compute characteristic velocity");
[characteristicVelocity_acceleration,characteristicVelocity_constVelocity] = compute_characteristicVelocity(PIV_data_filename,Truck_data_filename);

%% Compute Velocity fluctuation
load(Truck_data_filename,"sfreq");

% Create array for data
num_search_x = length(search_x);
amplitude_record_u_acceleration  = nan(1,num_search_x);
amplitude_record_v_acceleration  = nan(1,num_search_x);
amplitude_record_u_constVelocity = nan(1,num_search_x);
amplitude_record_v_constVelocity = nan(1,num_search_x);

power_spectrum_u_acceleration  = nan(1,num_search_x);
power_spectrum_v_acceleration  = nan(1,num_search_x);
power_spectrum_u_constVelocity = nan(1,num_search_x);
power_spectrum_v_constVelocity= nan(1,num_search_x);


% Create waitbar
D = parallel.pool.DataQueue;
h = waitbar(0, 'Please wait ...');
afterEach(D, @nUpdateWaitbar);
count = 0;

parfor ii = 1:num_search_x

    acceleration_fft_start_ind = NaN;
    acceleration_fft_stop_ind = NaN;
    constVelocity_fft_start_ind = NaN;
    constVelocity_fft_stop_ind = NaN;

    [velocity_u_fluctuation_acceleration,velocity_u_fluctuation_constVelocity,real_x,real_y] = compute_velocity_u_fluctuation(search_x(ii),search_y,characteristicVelocity_acceleration,characteristicVelocity_constVelocity,PIV_data_filename,Truck_data_filename);
    [velocity_v_fluctuation_acceleration,velocity_v_fluctuation_constVelocity,     ~,     ~] = compute_velocity_v_fluctuation(search_x(ii),search_y,characteristicVelocity_acceleration,characteristicVelocity_constVelocity,PIV_data_filename,Truck_data_filename);
    
    real_x = real_x .* 1000; % convert unit
    real_y = real_y .* 1000; % convert unit
    
    % Acceleration
    if (~isnan(velocity_u_fluctuation_acceleration))
        time_step = length(velocity_u_fluctuation_acceleration(1,:));
        [acceleration_fft_start_ind,acceleration_fft_stop_ind] = search_index_range((0:time_step-1)./sfreq, ...
            acceleration_fft_start_time, ...
            acceleration_fft_stop_time, ...
            acceleration_fft_time_range);
    end
    
    if (~isnan(velocity_v_fluctuation_acceleration))
        time_step = length(velocity_v_fluctuation_acceleration(1,:));
        [acceleration_fft_start_ind,acceleration_fft_stop_ind] = search_index_range((0:time_step-1)./sfreq, ...
            acceleration_fft_start_time, ...
            acceleration_fft_stop_time, ...
            acceleration_fft_time_range);
    end
    
    % Const velocity
    if (~isnan(velocity_u_fluctuation_constVelocity))
        time_step = length(velocity_u_fluctuation_constVelocity(1,:));
        [constVelocity_fft_start_ind,constVelocity_fft_stop_ind] = search_index_range((0:time_step-1)./sfreq, ...
            constVelocity_fft_start_time, ...
            constVelocity_fft_stop_time, ...
            constVelocity_fft_time_range);
    end
    
    if (~isnan(velocity_v_fluctuation_constVelocity))
        time_step = length(velocity_v_fluctuation_constVelocity(1,:));
        [constVelocity_fft_start_ind,constVelocity_fft_stop_ind] = search_index_range((0:time_step-1)./sfreq, ...
            constVelocity_fft_start_time, ...
            constVelocity_fft_stop_time, ...
            constVelocity_fft_time_range);
    end
    
    % Frequency Analysis
    % Acceleration
    if (~isnan(velocity_u_fluctuation_acceleration))
        time_step = length(velocity_u_fluctuation_acceleration(1,acceleration_fft_start_ind:acceleration_fft_stop_ind));
        fft_acceleration = fft(velocity_u_fluctuation_acceleration(:,acceleration_fft_start_ind:acceleration_fft_stop_ind),[],2);
        fft_acceleration = abs(fft_acceleration(:,2:end-1) ./ time_step);
        fft_frequency = (1:time_step-2)./time_step.*sfreq;
        [~,tmp_ind] = min(abs(fft_frequency - search_freq));
        amplitude_record_u_acceleration(ii) = fft_acceleration(tmp_ind);
    end
    
    if (~isnan(velocity_v_fluctuation_acceleration))
        time_step = length(velocity_v_fluctuation_acceleration(1,acceleration_fft_start_ind:acceleration_fft_stop_ind));
        fft_acceleration = fft(velocity_v_fluctuation_acceleration(:,acceleration_fft_start_ind:acceleration_fft_stop_ind),[],2);
        tmp_show = abs(fft_acceleration ./ time_step);
        fft_acceleration = abs(fft_acceleration(:,2:end-1) ./ time_step);
        fft_frequency = (1:time_step-2)./time_step.*sfreq;
        [~,tmp_ind] = min(abs(fft_frequency - search_freq));
        amplitude_record_v_acceleration(ii) = fft_acceleration(tmp_ind);
    end
    
    % const velocity
    if (~isnan(velocity_u_fluctuation_constVelocity))
        time_step = length(velocity_u_fluctuation_constVelocity(1,constVelocity_fft_start_ind:constVelocity_fft_stop_ind));
        fft_constVelocity = fft(velocity_u_fluctuation_constVelocity(:,constVelocity_fft_start_ind:constVelocity_fft_stop_ind),[],2);
        fft_constVelocity = abs(fft_constVelocity(:,2:end-1) ./ time_step);
        fft_frequency = (1:time_step-2)./time_step.*sfreq;
        [~,tmp_ind] = min(abs(fft_frequency - search_freq));
        amplitude_record_u_constVelocity(ii) = fft_constVelocity(tmp_ind);
    end
    
    if (~isnan(velocity_v_fluctuation_constVelocity))
        time_step = length(velocity_v_fluctuation_constVelocity(1,constVelocity_fft_start_ind:constVelocity_fft_stop_ind));
        fft_constVelocity = fft(velocity_v_fluctuation_constVelocity(:,constVelocity_fft_start_ind:constVelocity_fft_stop_ind),[],2);
        fft_constVelocity = abs(fft_constVelocity(:,2:end-1) ./ time_step);
        fft_frequency = (1:time_step-2)./time_step.*sfreq;
        [~,tmp_ind] = min(abs(fft_frequency - search_freq));
        amplitude_record_v_constVelocity(ii) = fft_constVelocity(tmp_ind);                            
    end

    send(D, ii);
end
close(h);
%% Visualize
% u acceleration
figure
plot(search_x.*1000,amplitude_record_u_acceleration);
grid on
xlabel("x");
ylabel("Amplitude");
title(sprintf("accelerating u (y=%.3f,f=%.3f)",search_y,search_freq));

% v acceleration
figure
plot(search_x.*1000,amplitude_record_v_acceleration);
grid on
xlabel("x");
ylabel("Amplitude");
title(sprintf("accelerating v (y=%.3f,f=%.3f)",search_y,search_freq));

% u acceleration
figure
plot(search_x.*1000,amplitude_record_u_constVelocity);
grid on
xlabel("x");
ylabel("Amplitude");
title(sprintf("Constant Velocity u (y=%.3f,f=%.3f)",search_y,search_freq));

% v acceleration
figure
plot(search_x.*1000,amplitude_record_v_constVelocity);
grid on
xlabel("x");
ylabel("Amplitude");
title(sprintf("Constant Velocity v (y=%.3f,f=%.3f)",search_y,search_freq));

%% Function
function [start_ind,stop_ind] = search_index_range(time,start_time,stop_time,ch)
if (ch)
    [~,start_ind] = min(abs(time - start_time));
    [~,stop_ind] = min(abs(time - stop_time));
else
    start_ind = 1;
    stop_ind = length(time);
end
end

% waitbar
function nUpdateWaitbar(~)
global num_search_x count h
    waitbar(count/num_search_x, h);
    count = count + 1;
end